--Customers: customer data, Employees: all employee information, Offices: sales office information, Orders: customers' sales orders, OrderDetails: sales order line for each sales order, Payments: customers' payment records, Products: a list of scale model cars, ProductLines: a list of product line categories
--this code queries the table name, number of attributes per table, number of rows per table

SELECT 'Customers' as table_name,
13 as number_of_attributes,
COUNT(*) as number_of_rows
FROM customers

UNION ALL

SELECT 'Products' as table_name,
9 as number_of_attributes,
COUNT(*) as number_of_rows
FROM products

UNION ALL

SELECT 'ProductLines' as table_name,
4 as number_of_attributes,
COUNT(*) as number_of_rows
FROM productlines

UNION ALL

SELECT 'Orders' AS table_name, 
7 AS number_of_attribute,
COUNT(*) AS number_of_row
FROM Orders

UNION ALL

SELECT 'OrderDetails' AS table_name, 
5 AS number_of_attribute,
COUNT(*) AS number_of_row
FROM OrderDetails

UNION ALL

SELECT 'Payments' AS table_name, 
4 AS number_of_attribute,
COUNT(*) AS number_of_row
FROM Payments

UNION ALL

SELECT 'Employees' AS table_name, 
8 AS number_of_attribute,
COUNT(*) AS number_of_row
FROM Employees

UNION ALL

SELECT 'Offices' AS table_name, 
9 AS number_of_attribute,
COUNT(*) AS number_of_row
FROM Offices;

--Question 1: Which Products Should We Order More of or Less of?
--The low stock represents the quantity of the sum of each product ordered divided by the quantity of product in stock
--The product performance represents the sum of sales per product
--Priority products for restocking are those with high product performance that are on the brink of being out of stock

--first, write a query to compute the low stock for each product using a correlated subquery

SELECT productCode,ROUND(SUM(quantityOrdered) * 1.0 / (SELECT quantityInStock
														FROM products p
														WHERE o.productCode = p.productCode), 2) AS low_stock
FROM orderdetails AS o
GROUP BY productCode
ORDER BY low_stock
LIMIT 10;

--second, write a query to compute the product performance for each product

SELECT productCode,
       SUM(quantityOrdered * priceEach) as product_performance
	FROM orderdetails
GROUP BY productCode
ORDER BY product_performance desc
LIMIT 10;

--lastly, combine the previous queries using a Common Table Expression (CTE) to display priority products for restocking using theÂ IN operator

WITH low_stock AS(
SELECT productCode,ROUND(SUM(quantityOrdered) * 1.0 / (SELECT quantityInStock
														FROM products p
														WHERE o.productCode = p.productCode), 2) AS low_stock
FROM orderdetails AS o
GROUP BY productCode
ORDER BY low_stock
LIMIT 10)

SELECT 	p.productName,p.productLine,o.productCode, SUM(o.quantityOrdered  * o.priceEach) AS Product_Performance
FROM orderdetails o
JOIN products AS p
ON p.productCode = o.productCode
WHERE o.productCode IN (SELECT productCode
						FROM low_stock)
GROUP BY o.productCode
ORDER BY Product_Performance DESC;

--Question 2: How Should We Match Marketing and Communication Strategies to Customer Behavior?
--Now we'll explore customer information by answering the second question: how should we match marketing and communication strategies to customer behaviors?
--This involves categorizing customers: finding the VIP (very important person) customers and those who are less engaged
--VIP customers bring in the most profit for the store
--Less-engaged customers bring in less profit

--Write a query to join the products, orders, and orderdetails tables to have customers and products information in the same place

SELECT o.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS profit
  FROM products p
  JOIN orderdetails od
    ON p.productCode = od.productCode
  JOIN orders o
    ON o.orderNumber = od.orderNumber
 GROUP BY o.customerNumber
 ORDER BY profit DESC;
 
 --Write a query to find the top five VIP customers
 
 WITH customer_orders AS(
 SELECT o.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS profit
  FROM products p
  JOIN orderdetails od
    ON p.productCode = od.productCode
  JOIN orders o
    ON o.orderNumber = od.orderNumber
 GROUP BY o.customerNumber
 ORDER BY profit DESC
 LIMIT 5)
 
 SELECT customerName, customerNumber,contactFirstName,contactLastName, country
 FROM customers
 WHERE customerNumber IN(
						SELECT customerNumber
						FROM customer_orders);

--Write a query to find the top five least-engaged customers

WITH leastcustomers AS(

SELECT o.customerNumber as customerNumber ,SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) AS profit
FROM products as p
JOIN orderdetails as od
ON p.productCode = od.productCode
JOIN orders as o
ON o.orderNumber = od.orderNumber
GROUP BY customerNumber
ORDER BY profit ASC
LIMIT 5)

SELECT c.customerName,c.contactFirstName,c.contactLastName,c.country,l.profit as new_profit
FROM customers AS c
JOIN leastcustomers  AS l
ON  l.customerNumber = c.customerNumber
WHERE c.customerNumber IN(SELECT customerNumber
						FROM leastcustomers)
GROUP BY c.contactFirstName
ORDER BY new_profit	;

--Question 3: How Much Can We Spend on Acquiring New Customers?
--To determine how much money we can spend acquiring new customers, we can compute the Customer Lifetime Value (LTV), which represents the average amount of money a customer generates. We can then determine how much we can spend on marketing

--Write a query to compute the average of customer profits using the CTE on the previous screen

WITH money_in_by_customer AS (
SELECT o.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS revenue
  FROM products p
  JOIN orderdetails od
    ON p.productCode = od.productCode
  JOIN orders o
    ON o.orderNumber = od.orderNumber
 GROUP BY o.customerNumber
)

SELECT AVG(mc.revenue) AS ltv
  FROM money_in_by_customer mc;
